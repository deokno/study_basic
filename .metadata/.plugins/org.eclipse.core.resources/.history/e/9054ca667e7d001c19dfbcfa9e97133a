/*
  >>>> Stored Procedure 란? <<<<<
  Query 문을 하나의 파일형태로 만들거나 데이터베이스에 저장해 놓고 함수처럼 호출해서 사용하는 것임.
  Stored Procedure 를 사용하면 연속되는 query 문에 대해서 매우 빠른 성능을 보이며, 
  코드의 독립성과 함께 보안적인 장점도 가지게 된다.
	
  	create or replace procedure pcd_student_select_one
	 (p_stno          IN    jdbc_tbl_student.stno%type
	, o_name          OUT   jdbc_tbl_student.name%type
	, o_tel           OUT   jdbc_tbl_student.tel%type
	, o_addr          OUT   jdbc_tbl_student.addr%type
	, O_registerdate  OUT   varchar2
	, O_classname     OUT   jdbc_tbl_class.classname%type 
	, O_teachername   OUT   jdbc_tbl_class.teachername%type
	) 
	is
	    v_cnt   number(1);
	    
	begin 
	    select count(*)
	    from jdbc_tbl_student
	    where stno = p_stno;
	    
	    if v_cnt = 0 then 
	        o_name := null;
	        o_tel := null;
	        o_addr := null;
	        o_registerdate := null;
	        o_classname := null;
	        o_teachername := null;
	        
	    else
	        select S.name, S.tel, S.addr, to_char(s.registerdate, 'yyyy-mm-dd hh24:mi:ss')
	              ,c.classname, C.teachername 
	              INTO
	              o_name, o_tel, o_addr, o_registerdate, o_classname, o_teachername
	        from jdbc_tbl_student S JOIN jdbc_tbl_class C
	        on S.FK_CLASSNO = C.CLASSNO
	        where S.stno = p_stno;
	    end if;
	end pcd_student_select_one;	

*/



package jdbc.day02.procedure;

import java.sql.*;

public class Procedure_select_one {

	public static void main(String[] args) {
			
		Connection conn = null;
		// connection conn 오라클 데이터베이스 서버와 연결을 맺어주는 객체
		
		CallableStatement cstmt = null; 
		
		try {
			// >>> 1. 오라클 드라이버 로딩 <<<  //
	        /*
	           === OracleDriver(오라클 드라이버)의 역할 ===
	           1). OracleDriver 를 메모리에 로딩시켜준다.
	           2). OracleDriver 객체를 생성해준다.
	           3). OracleDriver 객체를 DriverManager에 등록시켜준다.
	               --> DriverManager 는 여러 드라이버들을 Vector 에 저장하여 관리해주는 클래스이다.
	        */ 
	        
			
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			
			// >>> 2. 어떤 오라클서버와 연결을 할래? <<< // 
			conn = DriverManager.getConnection("jdbc:oracle:thin:@127.0.0.1:1521:xe", "HR", "cclass");
			
			// >>> 3. Connection conn 객체를 사용하여 prepareCall() 메소드를 호출함으로써  
			// 		  CallableStatement cstmt 객체를 생성한다. 
			// 		  즉, CallableStatement cstmt 객체가 우편배달부쯤에 해당하는 것이다. <<< //
			conn.prepareCall("{call pcd_student_select_one(?,?,?,?,?,?,?)}");
			
			
			
		} catch(ClassNotFoundException e) {
			System.out.println(">> Ojdbc.jar 파일이 없습니다. <<");
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
	}

}
